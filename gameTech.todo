Coursework 1:
    Basic Tasks:
        ✔ You must implement a Newtonian solver capable of updating the linear and angular motion of 3-dimensional objects. @done (2017-12-12 01:22:32)
        ✔ You must implement gravity, acting towards a ground. @done (2017-12-12 01:26:13)
        ✔ You must add the capability to launch a TEXTURED, spherical projectile into the environment from the camera's PoV with the 'J' key (the camera must be able to move and turn, as in the CSC8502 coursework). This projectile will be subject to Newtonian physics. @done (2017-12-12 01:28:26)
        ✔ You must add simple test scenarios demonstrating multiple different collision shapes interacting and responding to collisions. These should include sphere-sphere, sphere-plane, and sphere-box collisions. @done (2017-12-12 01:29:15)
        ✔ You must render your Physics engine performance timers to screen. @done (2017-12-12 01:29:12)
        ✔ You must implement a score counter. The score should increase by 100 every time a launched projectile hits a 'good' target, and decrease by 50 every time a launched projectile hits a 'bad' target. @done (2017-12-12 01:29:07)
        ✔ At any point, a player should be able to end their session by pressing the 'X' key. The program should exit cleanly. @done (2017-12-12 18:06:52)

        ☐ Texture projectile @high 
        ☐ Create Scene for good/bad @low 
        ☐ Sphere-plane check example @low 
        
    Advanced Features (Up to 20 Marks):
        
        ☐ Physics nodes in your simulation can have multiple collision shapes with their own offsets, and automatic compounded inertia calculation. In this fashion, you will be able to represent more complex objects as combinations of simpler shapes (such as a rabbit formed from multiple spheres). @critical 
        ✔ Your simulation will include broadphase culling of some form, providing a meaningful performance benefit. @done (2017-12-12 01:29:47)
        ✔ One scene shall include a GPU-modelled soft body (e.g. a piece of non-tearable cloth). @done (2017-12-12 01:29:49)

        ☐ Put colissions from11 softbody on gpu @low 
    
        Extended Features (Up to 30 Marks):
        ✔ One scene shall include a ball pool featuring over 100 colliders within a box. All physics computation for this ball pool, including collision detection and response, shall take place on the GPU. @done (2017-12-12 01:31:57)
        ✔ There should be enough space at the top of the ball pool box to allow movement of the balls inside, and there should be some meaningful way to interact with the ball pool (e.g., disturbing the balls by firing a projectile into it, or dragging a projectile through it). @done (2017-12-12 01:31:34)
        ✔ Your physics system will use event-driven broadphase. @ASK @done (2017-12-12 09:55:34)
         
        
Coursework Part B:
    Basic Features (Up to 50 Marks):
        Server Features:
        ✔ ​The server will create a maze based on client parameterisation. The scene will be navigable in two dimensions, and take the form of a square grid. Walls shall be impassable grid squares. @done (2017-12-12 01:34:41)
        ✔ The server will autonomously generate a Navigation Mesh appropriate to the created maze. @done (2017-12-12 01:34:46)
        ✔ The server will inform the client of the maze structure. @done (2017-12-12 01:34:49)
        ✔ The server will accept a start and goal position from the client and compute a route through the Navigation Mesh. The server will broadcast that route to the client. @done (2017-12-12 01:34:52)
        ✔ The server will accept an instruction to create an avatar for the client at the start position, which will follow the generated route. The server will send position updates for the avatar to the client. @today @done (2017-12-12 18:05:43)
        ✔ The server will show its network traffic (packets out/in per second, KB/s). @today @done (2017-12-12 15:49:11)
        Client Features:
        ✔ ​The client will accept input parameters for a maze for the server to generate (e.g., length and width in grid squares.) @today @done (2017-12-12 15:49:15)
        ✔ The client will render the generated maze in three dimensions. @today @done (2017-12-12 09:53:38)
        ✔ The client will accept input of a start position and a goal position, and broadcast these to the server. @today @done (2017-12-12 09:56:07)
        ✔ On a key press, the client will in==key press, the client will indicate the route between the start and the goal. @today @done (2017-12-12 20:21:54)
        ✔ On a key press, the client will send an instruction to the server to spawn an avatar to follow the path. The client will render the avatar based on the server's position updates. @today @done (2017-12-12 20:13:56)
        ✔ The client will show its network traffic (packets out/in per second, KB/s). @today @done (2017-12-12 15:49:07)
        
        ✔ If end node is moved recompute path from avatar position (therefore set start node to avatar position) @done (2017-12-12 20:25:13)
        ☐ Interpolate for smooth movement

    Advanced Features (Up to 20 Marks):
        Server Features:
        ☐ ​The server will add hazards to the maze which act using a hierarchical, data-driven FSM. Example parent states for these hazards might be 'patrol', 'pursue', 'flee'. The server will update the behaviour of these hazards based on client avatar position.
        ☐ The server will broadcast position updates for these hazards to the client.
        ✔ The server will allow multiple clients to connect to a maze when it is created, each with their own avatar, and provide routes for each on request. Client avatars are not expected to physically interact. @today @done (2017-12-12 19:59:45)
        ✔ The server will compute and broadcast routes on demand for clients, based on current location and updated goal position. @today @done (2017-12-12 20:25:18)
        ✔ The server will broadcast position updates for all clients to all clients. @today @done (2017-12-12 18:10:43)
        ☐ The server will employ string-pulling to govern the movement of client avatars.
        ✔ The server will accept a command to recreate the scene with a newly generated map. @done (2017-12-12 18:11:12)
        Client Features:
        ☐ ​The client will provide a point-click interface for start (right click) and end (left click) positions.
        ☐ Once a path is being followed, the client will accept a left click to update the goal position.
        ☐ The client will render hazards based on information received from the server.
        ☐ The client will be able to trigger a newly generated scene and maze with a key press.
        
    Extended Features (Up to 30 Marks):
        Server Features:
        ☐ ​The server will accept client instruction to change the environment by turning a passable square into a wall (a cube shall grow out of the ground). When this occurs, a nearby wall square should become passable. This will trigger a recomputation of the Navigation Mesh, with the updated mesh broadcast to all clients.
        ☐ The server shall, in some way, manage the possibility that a cube might be spawned in an occupied grid square.
        ☐ Client avatars can now physically interact, with all physics computation (collision detection and response, direction changes) taking place on the server.
        ☐ The server shall broadcast higher-order data to clients, not just position updates, in order to facilitate dead reckoning.
        Client Features:
        ☐ ​The client shall employ dead reckoning to approximate the position and direction of all client avatars, tending towards eventual consistency.
        ☐ The client shall accept a new command (keyboard or unassigned mouse click) to make a previously passable square unpassable by spawning a new cube. It shall broadcast this instruction to the server.